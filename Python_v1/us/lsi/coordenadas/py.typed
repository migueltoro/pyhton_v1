@dataclass(frozen=True,order=True)
class Coordenadas2D:
    latitud: float
    longitud: float
      
    @staticmethod
    def of(latitud:float,longitud:float) -> Coordenadas2D:...   
    @staticmethod
    def parse(text:str) -> Coordenadas2D: ...
    @staticmethod
    def center(coordenadas:Iterable[Coordenadas2D]) -> Coordenadas2D: ...
    @property
    def copy(self)->Coordenadas2D: ... 
    def distancia(self:Coordenadas2D, other:Coordenadas2D) -> float: ... 
    def es_cercana(self:Coordenadas2D, c:Coordenadas2D, d:float) -> bool: ...
    def __str__(self:Coordenadas2D) -> str: ...
    
@dataclass(frozen=True,order=True)
class Coordenadas3D:
    latitud: float
    longitud: float
    altitud: float
    
    @staticmethod
    def of(latitud:float,longitud:float,altitud:float) -> Coordenadas3D: ...
    @staticmethod
    def parse(text:str) -> Coordenadas3D: ...
    @property
    def to2D(self:Coordenadas3D) -> Coordenadas2D:...         
    def distancia(self:Coordenadas3D,other:Coordenadas3D) -> float: ...
    def es_cercana(self:Coordenadas3D, c:Coordenadas3D, d:float) -> bool: ...    
    def __str__(self:Coordenadas3D) -> str:...