def root_project(): ...
def absolute_path(file:str)->str: ...
def dir_path()->str: ...
def existe_fichero(filePath:str)->bool: ...
def partes_de_linea(linea:str, delimiter:str)-> list[str]: ...
def lineas_iterable(file:str,encoding:str) -> Iterable[str]: ...
def lineas_de_fichero(file:str,encoding:str) -> list[str]: ...
def lineas_de_csv(file:str, delimiter:str, encoding:str)-> Iterable[list[str]]: ...
def iterable_de_csv(file:str, delimiter:str, encoding:str)-> Iterable[list[str]]: ...
def iterable_de_csv_partes(file:str, delimiter:str, encoding:str)-> Iterable[str]:
def read(file:str,encoding:str) -> str: ...
def write(file:str,texto:str) -> None:
def write_iterable(file:str,iterable:Iterable[str]) -> None:
def encoding(file:str)->str:...

def iterate(initial:E, operator:Callable[[E],E], predicate:Callable[[E],bool]) -> Iterable[E]: ...     
def all_pairs(n:int,m:int,n0:int, m0:int)-> Iterable[IntPar]: ...
def average(iterable:Iterable[U])->float: ...
def first(iterable:Iterable[E], p:Callable[[E],bool]=lambda _:True) -> Optional[E]: ...
def first_and_last(iterable:Iterable[E],defaultvalue=None)->tuple[E,E]: ...
def distinct(iterable:Iterable[E])->Iterable[E]:  ...
def limit(iterable:Iterable[E],limit:int) -> Iterable[E]: ...
def count_if(iterable:Iterable[E],predicate:Callable[[E],bool])->int: ...
def index_true(iterable:Iterable[bool],default:int)->int: ...
def index_if(iterable:Iterable[E],predicate:Callable[[E],bool],default:int)->int: ...
def index_elem(iterable:Iterable[E],elem:E,default:int)->int: ...
def flat_map(iterable:Iterable[E],key:Callable[[E],Iterable[R]]) -> Iterable[R]: ...           
def enumerate_flat_map(iterable:enumerate[E],fm:Callable[[E],Iterable[R]]) -> Iterable[tuple[int,R]]: ...  
def flat(e: E | Iterable[E]) -> Iterable[E]: ...
def strfiter(iterable:Iterable[E],sep:str,prefix:str,suffix:str,key:Callable[[E],str])->str: ...
def grouping_reduce(iterable:Iterable[E],key:Callable[[E],K],op:Callable[[V,V],V],value:Callable[[E],V]) -> dict[K, V]: ...
def grouping_list(iterable:Iterable[E],key:Callable[[E],K],value:Callable[[E],V]) -> dict[K,list[V]]: ...
def grouping_set(iterable:Iterable[E],key:Callable[[E],K],value:Callable[[E],V]) -> dict[K,set[V]]: ...
def groups_size(iterable:Iterable[E],key:Callable[[E],K]=identity,value:Callable[[E],int]) -> dict[K,int]: ...

def check_argument(condition:bool,message=None)->None: ...