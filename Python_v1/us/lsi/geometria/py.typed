class Vector2D:
    x: float
    y: float
      
    @staticmethod
    def of(x:float,y:float) -> Vector2D: .. 
    @staticmethod
    def parse(txt:str) -> Vector2D: ...
    @staticmethod
    def of_grados(modulo:float,angulo:float) -> Vector2D: ...
    @staticmethod
    def of_radianes(modulo:float, angulo:float)-> Vector2D: ...  
    @property
    def modulo(self) -> float: ...
    @property
    def angulo(self) -> float: ...
    @property
    def copy(self) -> Vector2D:...
    @property
    def ortogonal(self)-> Vector2D: ...
    @property
    def unitario(self)-> Vector2D: ...
    def __neg__(self)-> Vector2D: ...
    def __add__(self,v:Vector2D)-> Vector2D: ...
    def __sub__(self,v:Vector2D)-> Vector2D:
    def rota(self, angulo:float)-> Vector2D:   
    def __mul__(self,factor:float)-> Vector2D:... 
    def multiply_vectorial_2d(self,v:Vector2D) -> float: ...
    def multiply_escalar(self,v:Vector2D) -> float: ...
    def proyecta_sobre(self,v:Vector2D)->Vector2D: ... 
    def angulo_con(self,v:Vector2D) -> float: ...
    def __str__(self)->str: ...
    
class Cuadrante(Enum):
    PRIMERO = auto()
    SEGUNDO = auto()
    TERCERO = auto()
    CUARTO = auto()
    
class Punto2D(Objeto2D):
    x: float
    y: float
    
    @staticmethod
    def origen() -> Punto2D: ...   
    @staticmethod
    def of(x:float,y:float) -> Punto2D: ...
    @staticmethod
    def parse(linea:str) -> Punto2D:
    @property
    def copy(self: Punto2D) ->  Punto2D:
    @property
    def vector(self: Punto2D) ->  Vector2D:...
    @property
    def cuadrante(self)->Cuadrante:...
    def distancia_a(self,p:Punto2D) -> float: ...
    @property
    def distancia_al_origen(self: Punto2D) -> float: ...
    def __add__(self,v:Vector2D) -> Punto2D: ... 
    def __sub__(self,v:Vector2D) -> Punto2D: ...
    def vector_to(self,p:Punto2D) -> Vector2D: ...
    def traslada(self,v:Vector2D) ->Punto2D: ...
    def rota(self, p:Punto2D, angulo:float) -> Punto2D: ...    
    def homotecia(self,p:Punto2D,factor:float) -> Punto2D: ...
    @property
    def shape(self)->Patch: ...
    def __str__(self) -> str: ...
    