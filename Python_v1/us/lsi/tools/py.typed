def check_argument(condition:bool,message=None)->None:  ...
def check_state(condition:bool,message=None)->None: ...
def check_not_null(reference:Any)->None: ...
def check_element_index(index:int,size:int)->int: ...
def check_position_index(index:int,size:int)->int: ...

def root_project(): ...
def absolute_path(file:str)->str: ...
def dir_path()->str: ...
def existe_fichero(filePath:str)->bool: ...
def partes_de_linea(linea:str, delimiter:str=",")-> list[str]: ...
def iterable_de_fichero(file:str,encoding:str='utf-8') -> Iterable[str]: ...    
def lineas_de_fichero(file:str,encoding:str='utf-8') -> list[str]: ...
def lineas_de_csv(file:str, delimiter:str=",", encoding:str='utf-8')-> list[list[str]]: ...
def iterable_de_csv(file:str, delimiter:str=",", encoding:str='utf-8')-> Iterable[list[str]]: ...
def iterable_de_csv_partes(file:str, delimiter:str=",", encoding='utf-8')-> Iterable[str]: ...         
def read(file:str,encoding:str='utf-8') -> str: ...  
def write(file:str,texto:str) -> None: ...
def write_iterable(file:str,iterable:Iterable[str], encoding='utf-8') -> None: ...
def encoding(file:str)->Optional[str]: ...

class Comparable(Protocol[E]):

    def __eq__(self:E, other) -> bool: ...
    def __lt__(self:E, other: E) -> bool: ...
    def __gt__ (self, other): ...
    def __ne__ (self, other): ...
    def __le__(self:E, other: E) -> bool: ...
    def __ge__ (self, other): ...