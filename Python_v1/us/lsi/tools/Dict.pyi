from __future__ import annotations
from typing import TypeVar, Iterable, Callable, overload

K = TypeVar('K')
V = TypeVar('V')
E = TypeVar('E')
R = TypeVar('R')
I = TypeVar('I',bound=Iterable)

@overload
def dict_map(d:dict[K,V],key:Callable[[K],E]) -> dict[E,V]: ... 
@overload  
def dict_map(d:dict[K,V],value:Callable[[V],R]) -> dict[K,R]: ...
@overload
def dict_map(d:dict[K,V],key:Callable[[K],E],value:Callable[[V],R]) -> dict[E,R]: ...
@overload
def dict_filter(d:dict[K,V],key:Callable[[K],bool]) -> dict[K,V]: ... 
@overload  
def dict_filter(d:dict[K,V],value:Callable[[V],bool]) -> dict[K,V]: ...
@overload
def dict_filter(d:dict[K,V],key:Callable[[K],bool],value:Callable[[V],bool]) -> dict[K,V]: ...
def dict_invert_list(d:dict[K,V | Iterable[V]]) -> dict[V,list[K]]: ...
def dict_invert_set(d:dict[K,V | Iterable[V]]) -> dict[V,set[K]]: ...
def str_dict(dictionary:dict[K,V],sep:str='\n',prefix:str='',suffix:str='',key:Callable[[K],str]=str,value:Callable[[V],str]=str)->str: ...
