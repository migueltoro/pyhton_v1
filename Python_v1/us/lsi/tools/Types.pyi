from __future__ import annotations
from typing import TypeVar, Protocol, Any
from fractions import Fraction


E = TypeVar('E', contravariant=True)
R = TypeVar('R')

class Comparable(Protocol[E]):

    def __eq__(self:E, other:Any) -> bool: ...      
    def __lt__(self:E, other: E) -> bool: ...
    def __gt__ (self:E, other:E)->bool: ...    
    def __ne__ (self:E, other:Any)->bool: ...        
    def __le__(self:E, other:E) -> bool: ...   
    def __ge__ (self:E, other:E)->bool: ...
    

class Sum(Protocol[R]):
    def __add__(self:R, other:R) -> R: ...

class SumDiv(Protocol[R]):
    def __add__(self:R, other:R) -> R: ...
    def __truediv__(self:R, other:R) -> R: ...

class RingElement(Protocol[R]):
    def __add__(self,other:R)->R:  ...        
    def __sub__(self,other:R)->R:  ...       
    def __mul__(self,other:R)->R:  ...
        
class FieldElement(Protocol[R]):
    def __add__(self,other:R)->R:  ...       
    def __sub__(self,other:R)->R:  ...         
    def __mul__(self,other:R)->R:  ...        
    def __truediv__(self,other:R)->R: ...

F = TypeVar("F",bound=FieldElement)

class Field(Protocol[F]):   
    @staticmethod       
    def one()->F: ...       
    @staticmethod 
    def zero()->F: ...       
    @staticmethod
    def parse(text:str)->F: ...        
    @staticmethod
    def str(v:F)->str: ...
           
    
class FractionField(Field[Fraction]):   
    @staticmethod   
    def one()->Fraction: ...
    @staticmethod 
    def zero()->Fraction: ...
    @staticmethod   
    def parse(text:str)->Fraction: ...
    @staticmethod   
    def str(v:Fraction)->str: ...

class ComplexField(Field[complex]):   
    @staticmethod
    def one()->complex:...
    @staticmethod
    def zero()->complex:...
    @staticmethod
    def parse(text:str)->complex:...
    @staticmethod
    def str(v:complex)->str:...
    
class FloatField(Field[float]):    
    @staticmethod
    def one()->float:...
    @staticmethod 
    def zero()->float:...
    @staticmethod 
    def parse(text:str)->float:...
    @staticmethod
    def str(v:float)->str:...     